<?php

/**
 * @file
 * Implements kindful payment processing for use with Drupal Commerce.
 */



/**
 * Implements hook_menu().
 */
function commerce_kindful_menu() {
  $items = array();

  // Define an always accessible path to receive transactions.
  $items['commerce_kindful/transaction'] = array(
    'page callback' => 'commerce_kindful_process_transaction',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Define an additional transaction path that is payment method / instance specific.
  $items['commerce_kindful/transaction/%commerce_payment_method_instance'] = array(
    'page callback' => 'commerce_kindful_process_transaction',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_kindful_commerce_payment_method_info() {
  $payment_methods = array();

  $display_title = t('kindful');

  $payment_methods['kindful'] = array(
    'base' => 'commerce_kindful',
    'title' => t('kindful'),
    'short_title' => t('kindful'),
    'display_title' => $display_title,
    'description' => t('kindful '),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}


/**
 * Payment method callback: settings form.
 */
function commerce_kindful_settings_form($settings = array()) {
  $form = array();
  // stored settings array.
  $settings = (array) $settings;
  
  // grab the organization ID
  $form['organization_ID'] = array(
    '#type' => 'textfield',
    '#title' => t('Organization ID'),
    '#description' => t('The Organization ID for your kindful account.'),
    '#default_value' => $settings['organization_ID'],
    '#required' => TRUE,
  );
  // grab the fund ID
  // TODO: verify that this can be set on a rule by rule basis
  $form['fund_ID'] = array(
    '#type' => 'textfield',
    '#title' => t('Fund ID'),
    '#description' => t('The Fund ID you want to use at kindful.'),
    '#default_value' => $settings['fund_ID'],
    '#required' => TRUE,
  );
  
  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form()
 * 
 * sets up the redirect POST request and form action URL for redirect to kindful
 * 
 */
function commerce_kindful_redirect_form($form, &$form_state, $order, $payment_method) {
 
  // get the order info
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  // grab the product information
  foreach($wrapper->commerce_line_items as $delta => $line_item_wrapper) {
     $product = $line_item_wrapper->commerce_product->value();
  }

  // sets up the return URLS for canceled transactions or successful returns
  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );
  
  // grab the payment method settings and put them in their own array
  $settings += $payment_method['settings'];
  
  // build the array for the query string and the form POST
  $data = array(
    'organization_ID' => $settings['organization_ID'],
    'source_ID' => t('Drupal Commerce'),
    'fund_ID' => $settings['fund_ID'],
    'item_ID' => $product->sku,
    'item_title' => $product->title,
    'price' => commerce_currency_amount_to_decimal($wrapper->commerce_order_total->amount->value(), 'USD'),
    'success_URL' => $settings['return'],
    'schedule' => $order->data['schedule'],
  );
  
  // set up the redirection URL
  $form['#action'] = url('https://usekindful.com/', array('query' => $data));
  
  // add the query string options as form fields
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }
  
  // submit to kindful
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Use kindful'),
  );

  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form_validate().
 * 
 * Validates data coming back from kindful in a POST request.
 */
function commerce_kindful_redirect_form_validate($order, $payment_method) {

  // grab the values from the POST
  $values = $_POST;

  // run some very, very, VERY basic  validation
  if ($values['source_ID'] == 'Drupal Commerce') {
    $order->data['kindful_transaction_id'] = $values['kindful_transaction'];
    if ($values['success'] == TRUE) { return TRUE; }
  }
  // if stuff doesn't work out, return FALSE so commerce can try again
  else return FALSE;
 
}

/**
 * Implements CALLBACK_commerce_payment_method_submit_form().
 * 
 * Asks for donation schedule (one time vs. recurring)
 *
 */ 
function commerce_kindful_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  
  // set up the radio button options
  $options = array( 'onetime' => 'One Time', 'recurring' => 'Recurring');
  
  // build the form field
  $form = array(
   $form['schedule'] = array(
    '#type' => 'radios',
    '#title' => t('Donation Type'),
    '#options' => $options,
    '#description' => t('Is this a one-time or recurring donation?'),
    '#required' => TRUE,
    ),
  );
  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_submit_form_validate().
 */ 
function commerce_kindful_submit_form_submit($payment_method, $pane_values, $checkout_pane, $order) {
  // grab the onetime/recurring option data and tack it onto  $order
  $order->data['schedule'] = $checkout_pane[0];
}
