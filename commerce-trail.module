<?php

/**
 * @file
 * Implements Trail payment processing for use with Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_trail_menu() {
  $items = array();

  // Define an always accessible path to receive transactions.
  $items['commerce_trail/transaction'] = array(
    'page callback' => 'commerce_trail_process_transaction',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Define an additional transaction path that is payment method / instance specific.
  $items['commerce_trail/transaction/%commerce_payment_method_instance'] = array(
    'page callback' => 'commerce_trail_process_transaction',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Returns the Trail URL.
 *
 * @param $method_id
 *   Optionally specify a payment method ID to include in the URL.
 */
function commerce_trail_url($method_id = NULL) {
  $parts = array(
    'commerce_trail',
    'transaction',
  );

  if (!empty($method_id)) {
    $parts[] = $method_id;
  }

  return url(implode('/', $parts), array('absolute' => TRUE));
}

/**
 * Processes an incoming transaction.
 *
 * @param $payment_method
 *   The payment method instance array that originally made the payment.
 * @param $debug_transaction
 *   Optionally specify an transaction array for debug purposes; if left empty, the transaction
 *     be pulled from the $_POST. If a transaction is passed in, validation of the transaction
 *     at trail will be bypassed.
 *
 * @return
 *   TRUE or FALSE indicating whether the transaction was successfully processed or not.
 */
function commerce_trail_process_transaction($payment_method = NULL, $debug_transaction = array()) {
  // Retrieve the transaction from $_POST if the caller did not supply an transaction array.
  // Note that Drupal has already run stripslashes() on the contents of the
  // $_POST array at this point, so we don't need to worry about them.
  if (empty($debug_transaction)) {
    $transaction = $_POST;

    // Exit now if the $_POST was empty.
    if (empty($transaction)) {
      watchdog('commerce_trail', 'transaction URL accessed with no POST data submitted.', array(), WATCHDOG_WARNING);
      return FALSE;
    }
  }
  else {
    $transaction = $debug_transaction;
  }

  // Exit if the transaction has already been processed.
  if (!empty($transaction['txn_id']) && $prior_transaction = commerce_trail_transaction_load($transaction['txn_id'])) {
    if ($prior_transaction['payment_status'] == $transaction['payment_status']) {
      watchdog('commerce_trail', 'Attempted to process an transaction that has already been processed with transaction ID @txn_id.', array('@txn_id' => $transaction['txn_id']), WATCHDOG_NOTICE);
      return FALSE;
    }
  }

  // Load the order based on the transaction's invoice number.
  if (!empty($transaction['invoice']) && strpos($transaction['invoice'], '-') !== FALSE) {
    list($transaction['order_id'], $timestamp) = explode('-', $transaction['invoice']);
  }
  else {
    $transaction['order_id'] = 0;
    $timestamp = 0;
  }

  if (!empty($transaction['order_id'])) {
    $order = commerce_order_load($transaction['order_id']);
  }
  else {
    $order = FALSE;
  }

  // Give the payment method module an opportunity to validate the receiver
  // e-mail address and amount of the payment if possible. If a validate
  // function exists, it is responsible for setting its own watchdog message.
  if (!empty($payment_method)) {
    $callback = $payment_method['base'] . '_trail_transaction_validate';

    // If a validator function existed...
    if (function_exists($callback)) {
      // Only exit if the function explicitly returns FALSE.
      if ($callback($order, $payment_method, $transaction) === FALSE) {
        return FALSE;
      }
    }
  }

  // Give the payment method module an opportunity to process the transaction.
  if (!empty($payment_method)) {
    $callback = $payment_method['base'] . '_trail_transaction_process';

    // If a processing function existed...
    if (function_exists($callback)) {
      // Skip saving if the function explicitly returns FALSE, meaning the transaction
      // wasn't actually processed.
      if ($callback($order, $payment_method, $transaction) !== FALSE) {
        // Save the processed transaction details.
        commerce_trail_transaction_save($transaction);
      }
    }
  }

  // Invoke the hook here so implementations have access to the order and
  // payment method if available and a saved transaction array that includes the payment
  // transaction ID if created in the payment method's default process callback.
  module_invoke_all('commerce_trail_transaction_process', $order, $payment_method, $transaction);
}

/**
 * Loads a stored transaction by ID.
 *
 * @param $id
 *   The ID of the transaction to load.
 * @param $type
 *   The type of ID you've specified, either the serial numeric transaction_id or the
 *     actual trail txn_id. Defaults to txn_id.
 *
 * @return
 *   The original transaction with some meta data related to local processing.
 */
function commerce_trail_transaction_load($id, $type = 'txn_id') {
  return db_select('commerce_trail_transaction', 'cpi')
    ->fields('cpi')
    ->condition('cpi.' . $type, $id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Saves an transaction with some meta data related to local processing.
 *
 * @param $transaction
 *   An transaction array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the transaction.
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the transaction is
 *     received by reference, it will also contain the serial numeric transaction_id
 *     used locally.
 */
function commerce_trail_transaction_save(&$transaction) {
  if (!empty($transaction['transaction_id']) && commerce_trail_transaction_load($transaction['txn_id'])) {
    $transaction['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_trail_transaction', $transaction, 'transaction_id');
  }
  else {
    $transaction['created'] = REQUEST_TIME;
    $transaction['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_trail_transaction', $transaction);
  }
}

/**
 * Deletes a stored transaction by ID.
 *
 * @param $id
 *   The ID of the transaction to delete.
 * @param $type
 *   The type of ID you've specified, either the serial numeric transaction_id or the
 *     actual trail txn_id. Defaults to txn_id.
 */
function commerce_trail_transaction_delete($id, $type = 'txn_id') {
  db_delete('commerce_trail_transaction')
    ->condition($type, $id)
    ->execute();
}

/**
 * Returns a unique invoice number based on the Order ID and timestamp.
 */
function commerce_trail_transaction_invoice($order) {
  return $order->order_id . '-' . REQUEST_TIME;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_trail_commerce_payment_method_info() {
  $payment_methods = array();

  $display_title = t('Pay using Trail');
  
  $payment_methods['trail'] = array(
    'base' => 'commerce_trail',
    'title' => t('Trail'),
    'short_title' => t('Trail'),
    'display_title' => $display_title,
    'description' => t('Trail - The path to fundraising success'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the Trail payment method.
 */
function commerce_trail_default_settings() {
  $default_currency = variable_get('commerce_default_currency', 'USD');

  return array(
    'business' => '',
    'currency_code' => in_array($default_currency, array_keys(commerce_trail_currencies())) ? $default_currency : 'USD',
    'allow_supported_currencies' => FALSE,
    'language' => 'US',
    'server' => 'sandbox',
    'payment_action' => 'sale',
    'transaction_logging' => 'notification',
    'show_payment_instructions' => FALSE,
    'transaction_create_billing_profile' => FALSE,
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_trail_settings_form($settings = array()) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_trail_default_settings();

  $form['business'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal e-mail address'),
    '#description' => t('The primary e-mail address of the PayPal account you want to use to receive payments.'),
    '#default_value' => $settings['business'],
    '#required' => TRUE,
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Default currency'),
    '#description' => t('Transactions in other currencies will be converted to this currency, so multi-currency sites must be configured to use appropriate conversion rates.'),
    '#options' => commerce_trail_currencies(),
    '#default_value' => $settings['currency_code'],
  );
  $form['allow_supported_currencies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow transactions to use any currency in the options list above.'),
    '#description' => t('Transactions in unsupported currencies will still be converted into the default currency.'),
    '#default_value' => $settings['allow_supported_currencies'],
  );
  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('PayPal login page language / locale'),
    '#options' => commerce_trail_languages(),
    '#default_value' => $settings['language'],
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('PayPal server'),
    '#options' => array(
      'sandbox' => ('Sandbox - use for testing, requires a PayPal Sandbox account'),
      'live' => ('Live - use for processing real transactions'),
    ),
    '#default_value' => $settings['server'],
  );
  $form['payment_action'] = array(
    '#type' => 'radios',
    '#title' => t('Payment action'),
    '#options' => array(
      'sale' => t('Sale - authorize and capture the funds at the time the payment is processed'),
      'authorization' => t('Authorization - reserve funds on the card to be captured later through your PayPal account'),
    ),
    '#default_value' => $settings['payment_action'],
  );
  $form['transaction_logging'] = array(
    '#type' => 'radios',
    '#title' => t('transaction logging'),
    '#options' => array(
      'notification' => t('Log notifications during transaction validation and processing.'),
      'full_transaction' => t('Log notifications with the full transaction during validation and processing (used for debugging).'),
    ),
    '#default_value' => $settings['transaction_logging'],
  );
  $form['show_payment_instructions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show a message on the checkout form when PayPal WPS is selected telling the customer to "Continue with checkout to complete payment via PayPal."'),
    '#default_value' => $settings['show_payment_instructions'],
  );
  $form['transaction_create_billing_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create a billing profile based on name and country data in the transaction for any order that does not have one yet.'),
    '#description' => t('This is most useful for sites that do not collect billing information locally but still want to have customer names on orders.'),
    '#default_value' => $settings['transaction_create_billing_profile'],
  );

  return $form;
}

/**
 * Payment method callback: adds a message and CSS to the submission form if
 * enabled in the payment method settings.
 */
function commerce_trail_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  if (!empty($payment_method['settings']['show_payment_instructions'])) {
    $form['trail_information'] = array(
      '#markup' => '<span class="commerce-paypal-wps-info">' . t('(Continue with checkout to complete payment via Paypal.)') . '</span>',
    );
  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_trail_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for a PayPal WPS option.
    foreach (array_keys($form['commerce_payment']['payment_method']['#options']) as $key) {
      list($method_id, $rule_name) = explode('|', $key);

      // If we find PayPal WPS, include its CSS on the form and exit the loop.
      if ($method_id == 'trail') {
        $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_trail') . '/theme/commerce_trail.theme.css';
        break;
      }
    }
  }
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_trail_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['business'])) {
    drupal_set_message(t('PayPal WPS is not configured for use. No PayPal e-mail address has been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_trail_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_trail_redirect_form_validate($order, $payment_method) {
  if (!empty($payment_method['settings']['transaction_logging']) &&
    $payment_method['settings']['transaction_logging'] == 'full_transaction') {
    watchdog('commerce_trail', 'Customer returned from PayPal with the following POST data:!transaction_data', array('!transaction_data' => '<pre>' . check_plain(print_r($_POST, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
  }

  // This may be an unnecessary step, but if for some reason the user does end
  // up returning at the success URL with a Failed payment, go back.
  if (!empty($_POST['payment_status']) && $_POST['payment_status'] == 'Failed') {
    return FALSE;
  }
}

/**
 * Payment method callback: validate an transaction based on receiver e-mail address,
 *   price, and other parameters as possible.
 */
function commerce_trail_paypal_transaction_validate($order, $payment_method, $transaction) {
  // Return FALSE if the receiver e-mail does not match the one specified by
  // the payment method instance.
  if (trim(strtolower($transaction['receiver_email'])) != trim(strtolower($payment_method['settings']['business']))) {
    commerce_payment_redirect_pane_previous_page($order);
    watchdog('commerce_trail', 'transaction rejected: invalid receiver e-mail specified (@receiver_email); must match the primary e-mail address on the PayPal account.', array('@receiver_email' => $transaction['receiver_email']), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Prepare the transaction data for inclusion in the watchdog message if enabled.
  $transaction_data = '';

  if (!empty($payment_method['settings']['transaction_logging']) &&
    $payment_method['settings']['transaction_logging'] == 'full_transaction') {
    $transaction_data = '<pre>' . check_plain(print_r($transaction, TRUE)) . '</pre>';
  }

  // Log a message including the PayPal transaction ID if available.
  if (!empty($transaction['txn_id'])) {
    watchdog('commerce_trail', 'transaction validated for Order @order_number with ID @txn_id.!transaction_data', array('@order_number' => $order->order_number, '@txn_id' => $transaction['txn_id'], '!transaction_data' => $transaction_data), WATCHDOG_NOTICE);
  }
  else {
    watchdog('commerce_trail', 'transaction validated for Order @order_number.!transaction_data', array('@order_number' => $order->order_number, '!transaction_data' => $transaction_data), WATCHDOG_NOTICE);
  }
}

/**
 * Payment method callback: process an transaction once it's been validated.
 */
function commerce_trail_paypal_transaction_process($order, $payment_method, &$transaction) {
  // Do not perform any processing on WPS transactions here that do not have
  // transaction IDs, indicating they are non-payment transactions such as those used
  // for subscription signup requests.
  if (empty($transaction['txn_id'])) {
    return FALSE;
  }

  // Exit when we don't get a payment status we recognize.
  if (!in_array($transaction['payment_status'], array('Failed', 'Voided', 'Pending', 'Completed', 'Refunded'))) {
    commerce_payment_redirect_pane_previous_page($order);
    return FALSE;
  }

  // If this is a prior authorization capture transaction for which we've already
  // created a transaction...
  if (in_array($transaction['payment_status'], array('Voided', 'Completed')) &&
    !empty($transaction['auth_id']) && $auth_transaction = commerce_paypal_transaction_load($transaction['auth_id'])) {
    // Load the prior transaction's transaction and update that with the capture values.
    $transaction = commerce_payment_transaction_load($auth_transaction['transaction_id']);
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('trail', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
  }

  $transaction->remote_id = $transaction['txn_id'];
  $transaction->amount = commerce_currency_decimal_to_amount($transaction['mc_gross'], $transaction['mc_currency']);
  $transaction->currency_code = $transaction['mc_currency'];
  $transaction->payload[REQUEST_TIME] = $transaction;

  // Set the transaction's statuses based on the transaction's payment_status.
  $transaction->remote_status = $transaction['payment_status'];

  // If we didn't get an approval response code...
  switch ($transaction['payment_status']) {
    case 'Failed':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t("The payment has failed. This happens only if the payment was made from your customer’s bank account.");
      break;

    case 'Voided':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('The authorization was voided.');
      break;

    case 'Pending':
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->message = commerce_paypal_transaction_pending_reason($transaction['pending_reason']);
      break;

    case 'Completed':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed.');
      break;

    case 'Refunded':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('Refund for transaction @txn_id', array('@txn_id' => $transaction['parent_txn_id']));
      break;
  }

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  $transaction['transaction_id'] = $transaction->transaction_id;

  // Create a billing profile based on the transaction if enabled.
  if (!empty($payment_method['settings']['transaction_create_billing_profile']) && isset($order->commerce_customer_billing)) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // If this order does not have a billing profile yet...
    if ($order_wrapper->commerce_customer_billing->value() === NULL) {
      // Ensure we have the required data in the transaction.
      if (empty($transaction['residence_country']) || empty($transaction['first_name']) || empty($transaction['last_name'])) {
        $data = array_intersect_key($transaction, drupal_map_assoc(array('residence_country', 'first_name', 'last_name')));
        watchdog('commerce_trail', 'A billing profile for Order @order_number could not be created due to insufficient data in the transaction:!data', array('@order_number' => $order->order_number, '!data' => '<pre>'. check_plain(print_r($data, TRUE)) .'</pre>'), WATCHDOG_WARNING);
      }
      else {
        // Create the new profile now.
        $profile = commerce_customer_profile_new('billing', $order->uid);

        // Add the address value.
        $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);

        $profile_wrapper->commerce_customer_address = array_merge(addressfield_default_values(), array(
          'country' => $transaction['residence_country'],
          'name_line' => $transaction['first_name'] . ' ' . $transaction['last_name'],
          'first_name' => $transaction['first_name'],
          'last_name' => $transaction['last_name'],
        ));

        // Save the profile, reference it from the order, and save the order.
        $profile_wrapper->save();
        $order_wrapper->commerce_customer_billing = $profile_wrapper;
        $order_wrapper->save();

        watchdog('commerce_trail', 'Billing profile created for Order @order_number containing the first and last names and residence country of the customer based on transaction data.', array('@order_number' => $order->order_number));
      }
    }
  }

  commerce_payment_redirect_pane_next_page($order);
  watchdog('commerce_trail', 'transaction processed for Order @order_number with ID @txn_id.', array('@txn_id' => $transaction['txn_id'], '@order_number' => $order->order_number), WATCHDOG_INFO);
}

/**
 * Builds a Website Payments Standard form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *   - server: which server to use, either sandbox or live
 *   - business: the PayPal e-mail address the payment submits to
 *   - cancel_return: the URL PayPal should send the user to on cancellation
 *   - return: the URL PayPal should send the user to on successful payment
 *   - currency_code: the PayPal currency code to use for this payment if the
 *     total for the order is in a non-PayPal supported currency
 *   - language: the PayPal language code to use on the payment form
 *   - payment_action: the PayPal payment action to use: sale, authorization,
 *     or order
 *   - payment_method: optionally the name of the Commerce payment method to
 *     include in the transaction notify_url
 *
 * @return
 *   A renderable form array.
 */
function commerce_trail_order_form($form, &$form_state, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Determine the currency code to use to actually process the transaction,
  // which will either be the default currency code or the currency code of the
  // order if it's supported by PayPal if that option is enabled.
  $currency_code = $settings['currency_code'];
  $order_currency_code = $wrapper->commerce_order_total->currency_code->value();

  if (!empty($settings['allow_supported_currencies']) && in_array($order_currency_code, array_keys(commerce_trail_currencies()))) {
    $currency_code = $order_currency_code;
  }

  $amount = $wrapper->commerce_order_total->amount->value();

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  // Build the data array that will be translated into hidden form values.
  $data = array(
    // Specify the checkout experience to present to the user.
    'cmd' => '_cart',

    // Signify we're passing in a shopping cart from our system.
    'upload' => 1,

    // The store's PayPal e-mail address
    'business' => $settings['business'],

    // The path PayPal should send the transaction to
    'notify_url' => commerce_paypal_transaction_url($settings['payment_method']),

    // Set the correct character set
    'charset' => 'utf-8',

    // Do not display a comments prompt at PayPal
    'no_note' => 1,

    // Do not display a shipping address prompt at PayPal
    'no_shipping' => 1,

    // Return to the review page when payment is canceled
    'cancel_return' => $settings['cancel_return'],

    // Return to the payment redirect page for processing successful payments
    'return' => $settings['return'],

    // Return to this site with payment data in the POST
    'rm' => 2,

    // The type of payment action PayPal should take with this order
    'paymentaction' => $settings['payment_action'],

    // Set the currency and language codes
    'currency_code' => $currency_code,
    'lc' => $settings['language'],

    // Use the timestamp to generate a unique invoice number
    'invoice' => commerce_paypal_transaction_invoice($order),

    // Define a single item in the cart representing the whole order
    'amount_1' => commerce_currency_amount_to_decimal(commerce_currency_convert($amount, $order_currency_code, $currency_code), $currency_code),
    'item_name_1' => t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
    'on0_1' => t('Product count'),
    'os0_1' => commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()),
  );

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_trail_order_form_data', $data, $order);

  $form['#action'] = commerce_trail_server_url($settings['server']);

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to PayPal'),
  );

  return $form;
}

/**
 * Returns the URL to the specified PayPal WPS server.
 *
 * @param $server
 *   Either sandbox or live indicating which server to get the URL for.
 *
 * @return
 *   The URL to use to submit requests to the PayPal WPS server.
 */
function commerce_trail_server_url($server) {
    return 'https://usetrail.com/';
}

